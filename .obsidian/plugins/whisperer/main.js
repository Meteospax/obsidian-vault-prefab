/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

"use strict";
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __reflectGet = Reflect.get;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
var __superGet = (cls, obj, key) => __reflectGet(__getProtoOf(cls), key, obj);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// source/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => Whisperer
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// source/settings.ts
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  vault_ambience: false,
  vault_ambience_path: "",
  ambience_per_files: true,
  music_volume: 50
};
var WhispererSettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    __publicField(this, "plugin");
    __publicField(this, "defaults");
    this.plugin = plugin;
  }
  display() {
    const {
      containerEl
    } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Vault ambience:").setDesc("If enabled, plugin would try to apply your embed URL as audio for the vault's ambience.").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.vault_ambience).onChange((value) => __async(this, null, function* () {
        const next = __spreadProps(__spreadValues({}, this.plugin.settings), {
          vault_ambience: value
        });
        yield this.plugin.updateSettings(next);
        this._updateDisplays([vaultAmbiencePath, vaultAmbiencePathInput], [value, value]);
      }));
      return toggle;
    });
    const vaultAmbiencePath = new import_obsidian.Setting(containerEl).setName("Path/URL to the audio of Vault's ambience (supports YouTube, SoundCloud):").setDesc("Be aware, that some videos on YouTube are blocked to be played as embed, so they may be not working in the Obsidian's Vault.");
    const vaultAmbiencePathInput = new import_obsidian.TextAreaComponent(containerEl).setPlaceholder("https://www.youtube.com/watch?v=dQw4w9WgXcQ").setValue(this.plugin.settings.vault_ambience_path).onChange((value) => __async(this, null, function* () {
      const next = __spreadValues({}, this.plugin.settings);
      next.vault_ambience_path = value;
      yield this.plugin.updateSettings(next);
    }));
    vaultAmbiencePathInput.inputEl.addClass("input-field");
    this._updateDisplays([vaultAmbiencePath, vaultAmbiencePathInput], [this.plugin.settings.vault_ambience, this.plugin.settings.vault_ambience]);
    new import_obsidian.Setting(containerEl).setName("Ambience per files:").setDesc("If enabled, plugin would try to apply your embed URL as audio for the files's ambience specifically: meaning one file got one ambience and etc., prioritised over vault's ambience (vault ambience would stop playing).").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.ambience_per_files).onChange((value) => __async(this, null, function* () {
        const next = __spreadProps(__spreadValues({}, this.plugin.settings), {
          ambience_per_files: value
        });
        yield this.plugin.updateSettings(next);
      }));
      return toggle;
    });
    new import_obsidian.Setting(containerEl).setName("").setDesc('To apply custom ambience to file, insert into the metadata cache of the file (YAML) "music" variable with URL or path to your audio.');
  }
  _updateDisplays(elements, values) {
    if (elements.length !== values.length)
      throw new Error("Elements and their values both are out of range in some other ways.");
    for (let i = 0; i < elements.length; i++) {
      const element = elements[i];
      if (element instanceof import_obsidian.Setting)
        element.settingEl.style.display = values[i] ? "block" : "none";
      if (element instanceof import_obsidian.TextAreaComponent)
        element.inputEl.style.display = values[i] ? "block" : "none";
    }
  }
  _updateState(data, prev, next) {
    if (prev !== next) {
      if (prev) {
        if (!this.defaults) {
          this.defaults = {
            color: data.inputEl.style.color,
            borderColor: data.inputEl.style.borderColor,
            borderWidth: data.inputEl.style.borderWidth
          };
        }
        data.inputEl.style.color = "red";
        data.inputEl.style.borderColor = "red";
        data.inputEl.style.borderWidth = "4px";
      } else if (this.defaults) {
        data.inputEl.style.color = this.defaults.color;
        data.inputEl.style.borderColor = this.defaults.borderColor;
        data.inputEl.style.borderWidth = this.defaults.borderWidth;
      }
    }
  }
};

// source/main.ts
var Whisperer = class _Whisperer extends import_obsidian2.Plugin {
  constructor() {
    super(...arguments);
    __publicField(this, "_settings", DEFAULT_SETTINGS);
    __publicField(this, "_players", []);
    __publicField(this, "_fileAmbiencePlayers", /* @__PURE__ */ new Map());
    __publicField(this, "_activeFile", null);
  }
  get settings() {
    return this._settings;
  }
  get players() {
    return this._players;
  }
  onload() {
    return __async(this, null, function* () {
      __superGet(_Whisperer.prototype, this, "onload").call(this);
      yield this.loadSettings();
      this.addSettingTab(new WhispererSettingsTab(this.app, this));
      this.registerEvent(this.app.workspace.on("file-open", this.handleFileOpen.bind(this)));
      this.apply();
    });
  }
  onunload() {
    return __async(this, null, function* () {
      __superGet(_Whisperer.prototype, this, "onunload").call(this);
      this.unapply();
    });
  }
  loadSettings() {
    return __async(this, null, function* () {
      this._settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  updateSettings(settings) {
    return __async(this, null, function* () {
      this.unapply();
      this._settings = settings;
      yield this.saveData(this.settings);
      this.apply();
    });
  }
  updateVolumeSettings(settings) {
    return __async(this, null, function* () {
      if (this.players.length === 0) {
        this.updateSettings(settings);
      } else {
        this._settings = settings;
        yield this.saveData(this.settings);
        this.players.forEach((player) => {
          var _a, _b;
          if (player.tagName === "IFRAME") {
            const iframe = player;
            if (iframe.src.includes("youtube.com") || iframe.src.includes("youtu.be")) {
              (_a = iframe.contentWindow) == null ? void 0 : _a.postMessage(
                JSON.stringify({
                  event: "command",
                  func: "setVolume",
                  args: [this.settings.music_volume]
                }),
                "*"
              );
            }
            if (iframe.src.includes("soundcloud.com")) {
              (_b = iframe.contentWindow) == null ? void 0 : _b.postMessage(
                JSON.stringify({
                  method: "setVolume",
                  value: this.settings.music_volume / 100
                }),
                "*"
              );
            }
          } else if (player.tagName === "AUDIO") {
            const audio = player;
            audio.volume = (this.settings.music_volume || 50) / 100;
          }
        });
      }
    });
  }
  unapply() {
    this.players.forEach((player) => {
      player.remove();
    });
    for (const playerData of this._fileAmbiencePlayers.values()) {
      playerData.player.remove();
    }
  }
  apply() {
    if (this.settings.vault_ambience) this.playAmbience();
  }
  playAmbience() {
    const container = document.getElementsByClassName("obsidian-app")[0];
    if (!container) return;
    let player = container.querySelector(".vault-ambience-player");
    if (player) player.remove();
    if (container.getElementsByClassName("file-ambience-player").length > 0) return;
    player = document.createElement("div");
    player.className = "vault-ambience-player";
    if (this.isUrl(this.settings.vault_ambience_path)) {
      if (this.settings.vault_ambience_path.includes("youtube.com") || this.settings.vault_ambience_path.includes("youtu.be")) {
        this.setupYouTubePlayer(player);
      } else if (this.settings.vault_ambience_path.includes("soundcloud.com")) {
        this.setupSoundCloudPlayer(player);
      }
    } else {
      this.setupLocalAudioPlayer(player);
    }
    container.appendChild(player);
    this._players.push(player);
  }
  setupYouTubePlayer(player) {
    const videoId = this.extractId(this.settings.vault_ambience_path);
    const iframe = document.createElement("iframe");
    iframe.src = `https://www.youtube.com/embed/${videoId}?autoplay=1&loop=1&playlist=${videoId}`;
    iframe.width = "300";
    iframe.height = "166";
    iframe.frameBorder = "0";
    iframe.allow = "autoplay";
    iframe.allowFullscreen = true;
    iframe.onload = () => {
      var _a;
      const volume = this.settings.music_volume || 50;
      (_a = iframe.contentWindow) == null ? void 0 : _a.postMessage(
        JSON.stringify({
          event: "command",
          func: "setVolume",
          args: [volume]
        }),
        "*"
      );
    };
    player.appendChild(iframe);
  }
  setupSoundCloudPlayer(player) {
    const embedUrl = this.getEmbedUrl(this.settings.vault_ambience_path);
    const iframe = document.createElement("iframe");
    iframe.src = embedUrl;
    iframe.width = "300";
    iframe.height = "166";
    iframe.allow = "autoplay";
    iframe.frameBorder = "0";
    player.appendChild(iframe);
  }
  setupLocalAudioPlayer(player) {
    const audio = document.createElement("audio");
    audio.src = this.app.vault.adapter.getResourcePath(this.settings.vault_ambience_path);
    audio.controls = true;
    audio.autoplay = true;
    audio.loop = true;
    audio.volume = (this.settings.music_volume || 50) / 100;
    player.appendChild(audio);
  }
  isUrl(str) {
    return /^(https?:\/\/)/.test(str);
  }
  getEmbedUrl(url) {
    if (url.includes("youtube.com") || url.includes("youtu.be")) {
      const videoId = url.includes("youtu.be") ? url.split("/").pop() : new URL(url).searchParams.get("v");
      return `https://www.youtube.com/embed/${videoId}?autoplay=1&start=0`;
    } else if (url.includes("soundcloud.com")) {
      return `https://w.soundcloud.com/player/?url=${encodeURIComponent(url)}&auto_play=true`;
    }
    throw new Error("Unsupported URL type.");
  }
  extractId(url) {
    const match = url.match(/(?:youtu\.be\/|youtube\.com\/(?:embed\/|v\/|.*v=))([\w-]{11})/);
    return match ? match[1] : "";
  }
  //#region Working with meta files
  handleFileOpen(file) {
    return __async(this, null, function* () {
      var _a;
      if (!file) return;
      if (!this.settings.ambience_per_files) return;
      const fileCache = this.app.metadataCache.getFileCache(file);
      const musicPath = (_a = fileCache == null ? void 0 : fileCache.frontmatter) == null ? void 0 : _a.music;
      if (musicPath) {
        this.pauseVaultAmbience();
        if (this._activeFile) {
          this.pauseFileAmbience(this._activeFile);
        }
        this._activeFile = file.path;
        this.playFileAmbience(musicPath, file.path);
      } else {
        if (this._activeFile) {
          this.pauseFileAmbience(this._activeFile);
        }
        if (!document.getElementsByClassName("obsidian-app")[0].querySelector(".vault-ambience-player")) {
          if (this.settings.vault_ambience)
            this.playAmbience();
        }
      }
    });
  }
  playFileAmbience(musicPath, filePath) {
    const container = document.getElementsByClassName("obsidian-app")[0];
    if (!container) return;
    const player = document.createElement("div");
    player.className = "file-ambience-player";
    if (this.isUrl(musicPath)) {
      if (musicPath.includes("youtube.com") || musicPath.includes("youtu.be")) {
        const videoId = this.extractId(musicPath);
        const iframe = document.createElement("iframe");
        iframe.src = `https://www.youtube.com/embed/${videoId}?autoplay=1&loop=1&playlist=${videoId}`;
        iframe.width = "300";
        iframe.height = "166";
        iframe.frameBorder = "0";
        iframe.allow = "autoplay";
        iframe.addClass("hidden-frame");
        player.appendChild(iframe);
      } else if (musicPath.includes("soundcloud.com")) {
        const embedUrl = this.getEmbedUrl(musicPath);
        const iframe = document.createElement("iframe");
        iframe.src = embedUrl;
        iframe.width = "300";
        iframe.height = "166";
        iframe.allow = "autoplay";
        iframe.frameBorder = "0";
        iframe.addClass("hidden-frame");
        player.appendChild(iframe);
      }
    } else {
      const audio = document.createElement("audio");
      audio.src = this.app.vault.adapter.getResourcePath(musicPath);
      audio.controls = true;
      audio.autoplay = true;
      audio.loop = true;
      audio.volume = (this.settings.music_volume || 50) / 100;
      player.appendChild(audio);
      audio.addEventListener("timeupdate", () => {
        const playbackData = this._fileAmbiencePlayers.get(filePath);
        if (playbackData) {
          playbackData.position = audio.currentTime;
        }
      });
    }
    container.appendChild(player);
    this._fileAmbiencePlayers.set(filePath, { player, position: 0 });
  }
  pauseFileAmbience(filePath) {
    var _a, _b;
    const playbackData = this._fileAmbiencePlayers.get(filePath);
    if (!playbackData) return;
    const { player } = playbackData;
    if (player instanceof HTMLAudioElement) {
      playbackData.position = player.currentTime;
      player.pause();
    } else if (player instanceof HTMLIFrameElement) {
      if (player.src.includes("youtube.com") || player.src.includes("youtu.be")) {
        (_a = player.contentWindow) == null ? void 0 : _a.postMessage(
          JSON.stringify({ event: "command", func: "pauseVideo", args: [] }),
          "*"
        );
      } else if (player.src.includes("soundcloud.com")) {
        (_b = player.contentWindow) == null ? void 0 : _b.postMessage(JSON.stringify({ method: "pause" }), "*");
      }
    }
    player.remove();
    this._fileAmbiencePlayers.delete(filePath);
  }
  pauseVaultAmbience() {
    this.unapply();
  }
  //#endregion
};

/* nosourcemap */